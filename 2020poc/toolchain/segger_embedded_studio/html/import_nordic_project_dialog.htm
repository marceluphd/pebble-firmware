<!DOCTYPE html>
<html>
  <head>
    <title>SEGGER Embedded Studio</title>
    <link rel="stylesheet" href="rwt/styles/w3.css"/>
    <link rel="stylesheet" href="rwt/styles/font-awesome.min.css"/>
    <link rel="stylesheet" href="rwt/styles/theme.css"/>
    <link rel="stylesheet" href="styles/studio.css"/>
    <link rel="stylesheet" href="styles/nordic.css"/>
    <style type="text/css">

input.w3-input
{ 
  outline: none;
} 

    </style>
    <script src="rwt/scripts/jquery-latest.js" > </script>
    <script src="scripts/studio.js" > </script>
    <script>

function basename(path)
{
  var index = path.lastIndexOf('/');
  if (index >= 0)
    path = path.substr(index + 1);
  return path;
}

function dirname(path)
{
  var index = path.lastIndexOf('/');
  if (index >= 0)
    path = path.substr(0, index);
  return path;
}

function fixPath(path)
{
  var result = path.replace(/\\/g, '/');
  if (result[result.length - 1] == '/')
    result = result.slice(0, -1);
  return result;
}

function createProject()
{
  var zephyr = fixPath(studio.getEnvironmentSetting("Nordic/ZephyrBase"));
  var cmakelists = fixPath(document.getElementById("cmakelists").value);
  var buildDir = fixPath(document.getElementById("buildDir").value);
  var boardDir = fixPath(document.getElementById("boardDir").value);
  var boardName = document.getElementById("boardName").value;
  var armemb = fixPath(studio.getEnvironmentSetting("Nordic/ToolchainDir"));
  var toolChainDir = armemb + "/bin";
  var sourceDir = dirname(cmakelists);
  var projectName = basename(sourceDir);
  var overlayFile = sourceDir + "/" + boardName + ".overlay";

  studio.setBusy(true);
  $(".w3-input, .w3-btn, .w3-check").addClass("w3-disabled");

  studio.setUserSetting("ARM/Zephyr/CMakeLists", document.getElementById("cmakelists").value);
  studio.setUserSetting("ARM/Zephyr/BuildDir", document.getElementById("buildDir").value);
  studio.setUserSetting("ARM/Zephyr/BoardDir", document.getElementById("boardDir").value);

  if (document.getElementById("deleteCache").value)
    studio.removeDirectoryAndContents(buildDir);
  studio.makeDirectory(buildDir);

  var cmakeExecutable = studio.getEnvironmentSetting("Nordic/CMakeExecutable");
  if (cmakeExecutable == "")
    cmakeExecutable = "cmake";
  var cmakeOptions = studio.getEnvironmentSetting("Nordic/CMakeOptions");
  var pythonExecutable = studio.getEnvironmentSetting("Nordic/PythonExecutable");
  var ninjaExecutable = studio.getEnvironmentSetting("Nordic/NinjaExecutable");
  var dtcExecutable = studio.getEnvironmentSetting("Nordic/DTCExecutable");

  var loadCmd = "\"" + cmakeExecutable + "\" -GNinja -DBOARD=" + boardName + " -DBOARD_DIR=" + boardDir + " -DZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb -DGNUARMEMB_TOOLCHAIN_PATH=\"" + armemb + "\" -B\"" + buildDir + "\" -H\"" + sourceDir + "\"";
  if (pythonExecutable != "")
    loadCmd += " -DPYTHON_EXECUTABLE=\"" + pythonExecutable + "\"";
  if (ninjaExecutable != "")
    loadCmd += " -DCMAKE_MAKE_PROGRAM=\"" + ninjaExecutable + "\"";
  if (dtcExecutable != "")
    loadCmd += " -DDTC=\"" + dtcExecutable + "\"";
  if (cmakeOptions != "")
    loadCmd += " " + cmakeOptions;
  if (studio.fileExists(overlayFile))
    loadCmd += " -DDTC_OVERLAY_FILE=\"" + overlayFile + "\""
  loadCmd += " -DEXTRA_KCONFIG_TARGETS=menuconfig_ses -DEXTRA_KCONFIG_TARGET_COMMAND_FOR_menuconfig_ses=\"" + studio.getSystemMacro("StudioDir") + "/html/configure_nordic_project_menuconfig.py\"";
  
  loadCmd += " && ";
  loadCmd += "\"$(StudioDir)/bin/ninja_import\" all";
  var loadCmdEnv = "ZEPHYR_BASE=" + zephyr;

  var solution = new StudioSolution(projectName);
  var solutionElement = solution.rootElement();
  solutionElement.setAttribute("target", "8");
  solutionElement.setAttribute("cmakelists_file_name", cmakelists);
  solutionElement.setAttribute("cmakelists_project", projectName + ";build;app/libapp.a");
  solutionElement.setAttribute("cmakelists_end_section", "# NORDIC SDK APP END");
  solutionElement.setAttribute("cmakelists_start_section", "# NORDIC SDK APP START");
  solutionElement.setAttribute("load_command", loadCmd);
  solutionElement.setAttribute("load_command_environment", loadCmdEnv);
  solutionElement.setAttribute("source_directory", zephyr);
  solutionElement.setAttribute("build_directory", buildDir);
  solutionElement.setAttribute("board_directory", boardDir);
  solutionElement.setAttribute("board_name", boardName);
  solutionElement.setAttribute("dts_compiled_file_name", buildDir + "/zephyr/" + boardName + ".dts_compiled");
  solutionElement.setAttribute("dts_folder", "dts files");
  solutionElement.setAttribute("dts_overlay_file_name", overlayFile);

  var configurationElement = solution.addConfiguration(solutionElement, "Common");
  configurationElement.setAttribute("build_toolchain_directory", toolChainDir);
  configurationElement.setAttribute("external_archive_command", "\"$(StudioDir)/bin/rm\" -f \"$(RelTargetPath)\" && \"$(ToolChainDir)/arm-none-eabi-ar\" -rcs \"$(RelTargetPath)\" $(Objects)");
  configurationElement.setAttribute("external_assemble_command", "\"$(ToolChainDir)/arm-none-eabi-gcc\" $(AsmOptions) -MD -MF \"$(RelDependencyPath)\" -o \"$(RelTargetPath)\" -c \"$(RelInputPath)\"");
  configurationElement.setAttribute("external_c_compile_command", "\"$(ToolChainDir)/arm-none-eabi-gcc\" $(COptions) -MD -MF \"$(RelDependencyPath)\" -fno-diagnostics-show-caret -o \"$(RelTargetPath)\" -c \"$(RelInputPath)\"");
  configurationElement.setAttribute("external_link_command", "\"$(ToolChainDir)/arm-none-eabi-gcc\" $(Objects) $(LinkOptions) -o \"$(RelTargetPath)\"");
  configurationElement.setAttribute("source_code_control_directory", zephyr);
  configurationElement.setAttribute("properties_filter", "Debug");

  var dtsfile = studio.readFileToString(boardDir+"/"+boardName+".dts");
  var n = dtsfile.indexOf("#include <nordic/");
  if (n != -1)
    {
      var m = dtsfile.indexOf(".dtsi>");
      if (m != -1)
        {
          var device = dtsfile.substring(n + 17, m);
          if (device == "nrf51822_qfaa")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF51822_xxAA");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00040000;RAM RWX 0x20000000 0x00004000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf51.svd");
            }
          else if (device == "nrf51822_qfab")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF51822_xxAB");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00020000;RAM RWX 0x20000000 0x00004000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf51.svd");
            }
          else if (device == "nrf51822_qfac")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF51822_xxAC");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00080000;RAM RWX 0x20000000 0x00004000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf51.svd");
            }
          else if (device == "nrf52810_qfaa")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF52810_xxAA");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00030000;RAM RWX 0x20000000 0x00006000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf52810.svd");
            }
          else if (device == "nrf52811_qfaa")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF52811_xxAA");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00030000;RAM RWX 0x20000000 0x00006000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf52811.svd");
            }
          else if (device == "nrf52820_qdaa")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF52820_xxAA");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00040000;RAM RWX 0x20000000 0x00008000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf52820.svd");
            }
          else if (device == "nrf52832_ciaa")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF52832_xxAA");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00080000;RAM RWX 0x20000000 0x00010000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf52.svd");
            }
          else if (device == "nrf52832_qfaa")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF52832_xxAA");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00080000;RAM RWX 0x20000000 0x00010000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf52.svd");
            }
          else if (device == "nrf52832_qfab")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF52832_xxAB");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00020000;RAM RWX 0x20000000 0x00004000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf52.svd");
            }
          else if (device == "nrf52833_qiaa")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF52833_xxAA");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00080000;RAM RWX 0x20000000 0x00020000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf52833.svd");
            }
          else if (device == "nrf52840_qiaa")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF52840_xxAA");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00100000;RAM RWX 0x20000000 0x00040000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf52840.svd");
            }
          else if (device == "nrf9160_xxaa" || device == "nrf9160_sica" || device == "nrf9160ns_sica")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF9160");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00100000;RAM RWX 0x20000000 0x00040000;UICR R 0x00FF8000 0x00000810");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf9160.svd");
            }
          else if (device == "nrf5340_cpuapp_qkaa" || device == "nrf5340_cpuappns_qkaa")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF5340_xxAA_APP");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x00000000 0x00100000;RAM RWX 0x20000000 0x00080000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf5340_application.svd");
            }
          else if (device == "nrf5340_cpunet_qkaa")
            {
              configurationElement.setAttribute("arm_target_device_name", "nRF5340_xxAA_NET");
              configurationElement.setAttribute("linker_section_placements_segments", "FLASH RX 0x01000000 0x00040000;RAM RWX 0x21000000 0x00010000");
              configurationElement.setAttribute("debug_register_definition_file", "$(PackagesDir)/nRF/Device/Registers/nrf5340_network.svd");
            }
          if (device.indexOf("nrf52")!=-1)
            {
              configurationElement.setAttribute("arm_architecture", "v7EM");
              configurationElement.setAttribute("arm_core_type", "Cortex-M4");
              configurationElement.setAttribute("arm_fpu_type", "FPv4-SP-D16");
            }
          else if (device.indexOf("nrf51")!=-1)
            {
              configurationElement.setAttribute("arm_architecture", "v6M");
              configurationElement.setAttribute("arm_core_type", "Cortex-M0");
            }
          else if (device.indexOf("nrf91")!=-1 || device.indexOf("nrf5340")!=-1)
            {
              configurationElement.setAttribute("arm_architecture", "v8M_Mainline");
              configurationElement.setAttribute("arm_core_type", "Cortex-M33");
              if (device != "nrf5340_cpunet_qkaa")
                {
                  configurationElement.setAttribute("arm_fpu_type", "FPv5-SP-D16");
                  configurationElement.setAttribute("arm_v8M_has_cmse", "Yes");
                  configurationElement.setAttribute("arm_v8M_has_dsp", "Yes");
                }
            }
          configurationElement.setAttribute("debug_target_connection", "J-Link");
          configurationElement.setAttribute("arm_target_interface_type", "SWD");
        }
    }

  var folderElement = solution.addFolder(solutionElement, "dts files");
  folderElement.setAttribute("path", sourceDir);
  folderElement.setAttribute("filter", boardName + ".overlay");
  configurationElement = solution.addConfiguration(folderElement, "Common");
  configurationElement.setAttribute("c_user_include_directories", zephyr+"/dts/common");
  configurationElement.setAttribute("c_system_include_directories", zephyr+"/include;"+zephyr+"/dts/arm;"+zephyr+"/dts");
  solution.addFile(folderElement, boardDir+"/"+boardName+".dts");
  solution.addFile(folderElement, boardDir+"/"+boardName+".yaml");
  solution.addFile(folderElement, zephyr + "/dts/common/common.dts");
  solution.addFile(folderElement, buildDir + "/zephyr/" + boardName + ".dts_compiled");

  if (!studio.fileExists(buildDir+"/build.ninja"))
    {
      studio.createProcessObject("cmake", true);
      cmake.setWorkingDirectory(sourceDir);
      var args = [];
      args.push("-GNinja");
      args.push("-DBOARD=" + boardName);
      args.push("-DBOARD_DIR=" + boardDir);
      args.push("-DZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb");
      args.push("-DGNUARMEMB_TOOLCHAIN_PATH=" + armemb);
      args.push("-B" + buildDir);
      args.push("-H" + sourceDir);
      if (pythonExecutable != "")
        args.push("-DPYTHON_EXECUTABLE=" + pythonExecutable);
      if (ninjaExecutable != "")
        args.push("-DCMAKE_MAKE_PROGRAM=" + ninjaExecutable);
      if (dtcExecutable != "")
        args.push("-DDTC=" + dtcExecutable);
      if (cmakeOptions != "")
        args.push(cmakeOptions);
      if (studio.fileExists(overlayFile))
        args.push("-DDTC_OVERLAY_FILE=" + overlayFile);
      args.push("-DEXTRA_KCONFIG_TARGETS=menuconfig_ses");
      args.push("-DEXTRA_KCONFIG_TARGET_COMMAND_FOR_menuconfig_ses=" + studio.getSystemMacro("StudioDir") + "/html/configure_nordic_project_menuconfig.py");
      cmake.setEnvironmentVariable("ZEPHYR_BASE", zephyr);
      
      if (!cmake.start(cmakeExecutable, args))
        throw "Cannot start \"" + cmakeExecutable + "\"";
      if (!cmake.waitForFinished(1000*60))
        throw "Did not finish \"" + cmakeExecutable + "\"";

      if (cmake.exitCode())
        {
          var output = cmake.readStandardError();
          alert(output);
          //output = cmake.readStandardOutput();
          //alert(output);
        }
    }

  var ninjaCommand = studio.getEnvironmentSetting("Nordic/NinjaExecutable");
  if (ninjaCommand == "")
    ninjaCommand = "ninja";
  var args = ["-t", "query", "zephyr/merged.hex"];
  studio.createProcessObject("process");
  process.setWorkingDirectory(buildDir);
  if (!process.start(ninjaCommand, args))
    throw "Cannot start \"" + ninjaCommand + "\"";
  if (!process.waitForFinished(1000))
    throw "Did not finish \"" + ninjaCommand + "\"";
  var output = process.readStandardOutput();

  var start = output.indexOf("zephyr/merged.hex:");
  if (start != -1)
    start = output.indexOf("CUSTOM_COMMAND");
  var end = output.indexOf("||");
  if (start != -1 && end != -1)
    {            
      var inputs = output.substring(start+14, end).trim().split("\n");
      var projectElement = solution.addProject(solutionElement, "zephyr/merged.hex");
      configurationElement = solution.addConfiguration(projectElement, "Common");
      configurationElement.setAttribute("debug_initial_breakpoint", "z_cstart");
      configurationElement.setAttribute("debug_start_from_entry_point_symbol", "No");
      configurationElement.setAttribute("project_dependencies", "all(build)");
      configurationElement.setAttribute("external_build_file_name", "$(ProjectDir)/zephyr/merged.hex");
      var n = 0;
      for (var i=0;i<inputs.length;i++)
        {
          var tinput = inputs[i].trim();
          if (tinput.length && tinput.lastIndexOf(".elf")==tinput.length-4)
            {
              if (n)
                configurationElement.setAttribute("external_debug_symbols_file_name"+n, "$(ProjectDir)/"+tinput);
              else
                configurationElement.setAttribute("external_debug_symbols_file_name", "$(ProjectDir)/"+tinput);
              n++;
            }
        }
      configurationElement.setAttribute("external_link_command", "");
      configurationElement.setAttribute("project_type", "Externally Built Executable");
    } 

  var importElement = solution.addImport(solutionElement, "build.emProject");
  importElement.setAttribute("can_modify_solution", "No");

  var fp = buildDir + "/" + projectName + ".emProject";
  solution.writeToFile(fp, 2);

  if (studio.openSolution(fp))
    if (end != -1)
      studio.setActiveProject("zephyr/merged.hex");
    else
      studio.setActiveProject("zephyr/zephyr.elf(build)");

  studio.closeWindow(1);
}

function browse(caption, id, isDirNotFile, filter)
{
  var path = document.getElementById(id).value;
  if (path == "")
    path = studio.getEnvironmentSetting("Nordic/ZephyrBase");
  if (isDirNotFile)
    path = studio.browseExistingDirectory(caption, path);
  else
    path = studio.browseExistingFileName(caption, path, filter);
  if (path)
    {
      var element = document.getElementById(id);
      var newValue = fixPath(path);
      if (element.value != newValue)
        {
          element.value = newValue;
          element.onchange();
        }
     
      document.getElementById(id).value = fixPath(path);
    }
}

function updateBuildDirectory()
{
  var buildDirElement = document.getElementById("buildDir");
  var boardNameElement = document.getElementById("boardName");
  var cmakelistsElement = document.getElementById("cmakelists");
  var cmakelistsDir = dirname(cmakelistsElement.value);
  var boardName = boardNameElement.value;
  if (cmakelistsDir == "" || boardName == "")
    buildDirElement.value = "";
  else
    buildDirElement.value = cmakelistsDir + "/build_" + boardName;
}

function updateBoardNameOptions(boardDir)
{
  var boardNameElement = document.getElementById("boardName");
  var files = studio.getDirectoryList(boardDir, "*.yaml");
  var options = "";
  for (var i = 0; i < files.length; i++)
    {
      var file = files[i];
      options += "<option>" + file.slice(0, -5) + "</option>";
    }
  boardNameElement.innerHTML = options;
  updateBuildDirectory();
}

$(document).ready(function()
{
  var zephyr = studio.getEnvironmentSetting("Nordic/ZephyrBase");
  if (zephyr == "")
    {
      // Get setting from previous location for backward compatility
      zephyr = studio.getSolutionAttribute("source_directory");
      if (zephyr == "")
        zephyr = studio.getUserSetting("ARM/Zephyr/Base");

      if (zephyr == "")
        {
          // Get setting from user
          if (!studio.showWarningMessageBox("Zephyr Base Not Set", "<p>The <b>nRF Connect &gt; Directories > Zephyr Base</b> environment option has not been set.</p><p>Click <b>OK</b> to locate this directory.</p>"))
            {
              studio.closeWindow(0);
              return;
            }
          zephyr = studio.browseExistingDirectory("Locate Zephyr Base", "/");
        }
      if (zephyr == "")
        {
          studio.closeWindow(0);
          return;
        }
      studio.setEnvironmentSetting("Nordic/ZephyrBase", fixPath(zephyr));
    }

  var toolchainDir = studio.getEnvironmentSetting("Nordic/ToolchainDir");
  if (toolchainDir == "")
    {
      // Get setting from previous location for backward compatility
      toolchainDir = studio.getUserSetting("ARM/Zephyr/ToolchainDir");
      if (toolchainDir == "")
        {
          // Get setting from user
          if (!studio.showWarningMessageBox("GNU ARM Embedded Toolchain Directory Not Set", "<p>The <b>nRF Connect &gt; Directories > GNU ARM Embedded Toolchain Directory</b> environment option has not been set.</p><p>Click <b>OK</b> to locate this directory.</p>"))
            {
              studio.closeWindow(0);
              return;
            }
          toolchainDir = studio.browseExistingDirectory("Locate Zephyr Base", zephyr);
        }
      if (toolchainDir == "")
        {
          studio.closeWindow(0);
          return;
        }
      studio.setEnvironmentSetting("Nordic/ToolchainDir", fixPath(toolchainDir));
    }

  var cmakelists = studio.getSolutionAttribute("cmakelists_file_name");
  if (cmakelists == "")
    cmakelists = fixPath(studio.getUserSetting("ARM/Zephyr/CMakeLists"));

  var build = studio.getSolutionAttribute("build_directory");
  if (build == "")
    build = fixPath(studio.getUserSetting("ARM/Zephyr/BuildDir"));

  var board = studio.getSolutionAttribute("board_directory");
  if (board == "")
    board = fixPath(studio.getUserSetting("ARM/Zephyr/BoardDir"));

  updateBoardNameOptions(board);

  var name = studio.getSolutionAttribute("board_name");
  if (name == "")
    name = basename(board);

  document.getElementById("cmakelists").value = cmakelists;
  document.getElementById("buildDir").value = build;
  document.getElementById("boardDir").value = board;
  document.getElementById("boardName").value = name;
});

    </script>
  </head>
  <body>
    <div class="w3-container header w3-light-blue">
      <div class="w3-left">
        <img src="images/nRFConnectLogo.png" />
      </div>
      <div class="w3-left w3-padding">
        <h3 class="w3-text-white">nRF Connect Options</h3>
      </div>
    </div>

    <form class="w3-container main">
      <div class="w3-section">
        <label><b>CMakeLists.txt</b></label>
        <div class="w3-row">
          <div class="w3-col m11">
            <input class="w3-input w3-border w3-round" type="text" id="cmakelists" onchange="updateBuildDirectory()" />
          </div>
          <div class="w3-col m1" style="padding-left: 4px">
            <span class="w3-btn w3-round w3-white w3-border w3-medium" title="Locate CMakeLists.txt" onclick='browse("Locate CMakeLists.txt", "cmakelists", false, "CMakeLists.txt")'><i class="fa fa-ellipsis-h"></i></span>
          </div> 
        </div>
      </div>


     <div class="w3-section">
        <label><b>Board Directory</b></label>
        <div class="w3-row">
          <div class="w3-col m11">
            <input class="w3-input w3-border w3-round" type="text" id="boardDir" onchange="updateBoardNameOptions(this.value)" />
          </div>
          <div class="w3-col m1" style="padding-left: 4px">
            <span class="w3-btn w3-round w3-white w3-border w3-medium" title="Locate Board Directory" onclick='browse("Locate Board Directory", "boardDir", true)'><i class="fa fa-ellipsis-h"></i></span>
          </div>
        </div>
      </div>


     <div class="w3-section">
       <label><b>Board Name</b></label>
       <div class="w3-row">
         <div class="w3-col m11">
           <div class="w3-input w3-border w3-round">
             <select class="w3-select w3-border-0" name="boardName" id="boardName" onchange="updateBuildDirectory()">
             </select>
           </div>
         </div>
         <div class="w3-col m1" style="padding-left: 4px">
           <span class="w3-round w3-white w3-border w3-medium" title="Board Name" />
         </div>
       </div>
     </div>

     <div class="w3-section">
        <label><b>Build Directory</b></label>
        <div class="w3-row">
          <div class="w3-col m11">
            <input class="w3-input w3-border w3-round" type="text" id="buildDir" />
          </div>
          <div class="w3-col m1" style="padding-left: 4px">
            <span class="w3-btn w3-round w3-white w3-border w3-medium" title="Locate Build Directory" onclick='browse("Locate Build Directory", "buildDir", true)'><i class="fa fa-ellipsis-h"></i></span>
          </div>
        </div>
      </div>

      <div class="w3-section">
        <input class="w3-check" type="checkbox" id="deleteCache" title="Clean Build Directory"/>
        <label>Clean Build Directory</label>
      </div>
    </form>

    <div class="footer w3-light-grey">
      <div class="w3-section w3-padding w3-right">
        <span class="w3-btn w3-round w3-white w3-border w3-medium" onclick="createProject();">OK</span>
        <span class="w3-btn w3-round w3-white w3-border w3-medium" onclick="studio.closeWindow(0);">Cancel</span>
      </div>
    </div>


  </body>
</html>

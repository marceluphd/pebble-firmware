// **********************************************************************
// *                    SEGGER Microcontroller GmbH                     *
// *                        The Embedded Experts                        *
// **********************************************************************
// *                                                                    *
// *            (c) 2014 - 2020 SEGGER Microcontroller GmbH             *
// *            (c) 2001 - 2020 Rowley Associates Limited               *
// *                                                                    *
// *           www.segger.com     Support: support@segger.com           *
// *                                                                    *
// **********************************************************************
// *                                                                    *
// * All rights reserved.                                               *
// *                                                                    *
// * Redistribution and use in source and binary forms, with or         *
// * without modification, are permitted provided that the following    *
// * conditions are met:                                                *
// *                                                                    *
// * - Redistributions of source code must retain the above copyright   *
// *   notice, this list of conditions and the following disclaimer.    *
// *                                                                    *
// * - Neither the name of SEGGER Microcontroller GmbH                  *
// *   nor the names of its contributors may be used to endorse or      *
// *   promote products derived from this software without specific     *
// *   prior written permission.                                        *
// *                                                                    *
// * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
// * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
// * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
// * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
// * DISCLAIMED.                                                        *
// * IN NO EVENT SHALL SEGGER Microcontroller GmbH BE LIABLE FOR        *
// * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
// * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
// * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
// * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
// * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
// * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
// * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
// * DAMAGE.                                                            *
// *                                                                    *
// **********************************************************************

#ifndef __new_H
#define __new_H

#include <cstdlib>
#include <exception>

extern "C++" {

namespace std
{

typedef void (*new_handler)();
new_handler set_new_handler(new_handler) throw();
new_handler get_new_handler() throw();

struct nothrow_t { };
extern const nothrow_t nothrow;

class bad_alloc : public exception
{
public:
  bad_alloc() throw();
  virtual ~bad_alloc() throw();
  const char* what() const throw();
};

class bad_array_new_length : public bad_alloc
{
public:
  bad_array_new_length() throw();
  virtual ~bad_array_new_length() throw();
  const char* what() const throw();
};

}

// throwing (only when built with exceptions enabled)
void* operator new (std::size_t size);
void* operator new[] (std::size_t size);
void operator delete (void* ptr) throw();
void operator delete[] (void* ptr) throw();

// nothrow
void* operator new (std::size_t size, const std::nothrow_t& nothrow_value) throw();
void* operator new[] (std::size_t size, const std::nothrow_t& nothrow_constant) throw();
void operator delete (void* ptr, const std::nothrow_t& nothrow_constant) throw();
void operator delete[] (void* ptr, const std::nothrow_t& nothrow_constant) throw();

// placement
inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }
inline void  operator delete(void* ptr, void* voidptr2) throw() { }
inline void  operator delete[](void*, void*) throw() { }

// dynamic
void operator delete(void *, std::size_t);
void operator delete(void *, std::size_t, const std::nothrow_t&);
void operator delete[](void *, std::size_t);
void operator delete[](void *, std::size_t, const std::nothrow_t&);
}

#endif

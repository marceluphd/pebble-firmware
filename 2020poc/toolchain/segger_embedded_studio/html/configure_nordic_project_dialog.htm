<!DOCTYPE html>
<html>
  <head>
    <title>SEGGER Embedded Studio</title>
    <link rel="stylesheet" href="rwt/styles/w3.css"/>
    <link rel="stylesheet" href="rwt/styles/font-awesome.min.css"/>
    <link rel="stylesheet" href="styles/studio.css"/>
    <link rel="stylesheet" href="styles/nordic.css"/>
    <style type="text/css">

.node
{
  cursor: default;
}

.node.hidden
{
  display: none !important;
}

.node.filtered
{
  display: none !important;
}

.node.disabled
{
  color: #808080;
}

.node.selected > SPAN > .prompt
{
  font-weight: bold;
}

.node:not(.selected) > SPAN > .prompt
{
  font-weight: normal;
}

.node.comment > SPAN > .prompt
{
  font-style: italic;
}

.node.bool:not(.assignable) > SPAN > INPUT
{
  display: none;
}

.node.menu.fold.empty > SPAN > .prompt, .node.bool.fold.empty:not(.assignable) > SPAN > .prompt
{
  color: #808080;
}

.fold
{
  cursor: pointer;
  margin-top: 2px;
  margin-bottom: 2px;
  padding-left: 16px;
.}

.fold.open
{
  background: url("rwt/images/fold_open.png") no-repeat 0px 5px;
}

.fold:not(.open)
{
  background: url("rwt/images/fold_closed.png") no-repeat 0px 5px;
}

.fold.empty
{
  background: url("rwt/images/fold_empty.png") no-repeat 0px 5px !important;
}


.fold.open > .node
{
  display: block;
}

.fold:not(.open) > .node
{
  display: none;
}

.name
{
  display: none;
}

.show-names .name
{
  display: inline;
  color: #808080;
}

.info
{
  display: none;
}

.show-info .info
{
  display: inline;
  color: #808080;
}

.breadcrumb
{
  color: white;
  font-size: small;
}

input[type=text]
{
  width: 10em;
  border: none;
  border-radius: 4px;
  background-color: #F0F0F0;
  margin: 1px;
  font-size: small;
}

    </style>
    <script src="rwt/scripts/jquery-latest.js" > </script>
    <script src="scripts/studio.js" > </script>
    <script>

var g_showAll = false;
var g_zephyrBase;
var g_boardDirectory;
var g_buildDirectory;
var g_configFilePath;
var g_loadConfigFilePath = "";
var g_saveConfigFilePath = "";
var g_filterInput;
var g_filterTimer;
var g_mainDiv;
var g_mainDivMarginTop;
var g_mainDivMarginBottom;
var g_breadcrumbDiv;
var g_selectedNode;
var g_menuconfigStarted = false;

function processFinished()
{
}

function kconfigCommand(command)
{
  process.writeStandardInput(command + "\n");
}

function kconfigGetTree()
{
  kconfigCommand("get_json_tree");
}

function kconfigSetValue(vr, vl)
{
  kconfigCommand("set_value " + vr + " " + vl);
}

function kconfigLoadConfig(filepath)
{
  kconfigCommand("load_config " + filepath);
}

function kconfigWriteConfig(filepath)
{
  kconfigCommand("write_config " + filepath);
}

function kconfigQuit()
{
  kconfigCommand("quit");
}

function kconfigClearTree()
{
  var div = $("div.main");
  div.empty();
  div[0].populated = false;
  clearSelectedNode();
}

function toggleFold(event)
{
  if (this == event.target)
    this.classList.toggle('open');
}

function radiobuttonClicked(event)
{
  kconfigSetValue(this.value, "y");
  kconfigGetTree();
}

function checkboxClicked(event)
{
  kconfigSetValue(this.name, this.checked ? "y" : "n");
  kconfigGetTree();
}

function stringChanged(event)
{
  if (this.parentElement.classList.contains("disabled"))
    {
      event.preventDefault();
      event.stopPropagation();
    }
  else
    {
      kconfigSetValue(this.name, this.value);
      kconfigGetTree();
    }
}

function getNodeY(node)
{
  return node.offsetTop - g_mainDivMarginTop;
}

function setNodeY(node, y)
{
  var currentY = getNodeY(node);
  if (currentY != y)
    window.scrollBy(0, currentY - y);
}

function getNodeHeight(node)
{
  return node.offsetHeight;
}

function ensureSelectedNodeVisible()
{
  if (nodeIsVisible(g_selectedNode))
    {
      var windowTopY = window.pageYOffset;
      var windowHeight = window.innerHeight;

      var viewTopY = windowTopY;
      var viewHeight = windowHeight - g_mainDivMarginTop - g_mainDivMarginBottom;
      var viewBottomY = viewTopY + viewHeight;

      var nodeTopY = getNodeY(g_selectedNode);
      var nodeHeight = getNodeHeight(g_selectedNode);
      var nodeBottomY = nodeTopY + nodeHeight;

      var yDelta;

      if (nodeTopY < viewTopY)
        yDelta = nodeTopY - viewTopY;
      else if (nodeBottomY > viewBottomY)
        {
          yDelta = nodeBottomY - viewBottomY;
          if (nodeTopY - yDelta < viewTopY) 
            yDelta = nodeTopY - viewTopY;
        }

      if (yDelta)
        window.scrollBy(0, yDelta);
    }
}

function getBreadcrumbTrail(node)
{
  var result = "";
  while (node && node.classList.contains("node"))
     {
       var text = "<span";
       if (node.title)
         text += " title='" + node.title + "'";
       text += ">" + node.prompt + "</span>";

       if (result == "")
         result = text;
       else
         result = text + " &gt; " + result;

       node = node.parentElement;
     }
  return result;
}

function selectNode(node, visible)
{
  if (node && node.classList.contains("node") && !node.classList.contains("comment"))
    {
      clearSelectedNode();

      g_selectedNode = node;
      g_selectedNode.classList.add("selected");

      if (g_selectedNode.inputElement)
        g_selectedNode.inputElement.focus();

      g_breadcrumbDiv.innerHTML = getBreadcrumbTrail(g_selectedNode);

      if (visible)
        ensureSelectedNodeVisible();
    }
}

function clearSelectedNode()
{
  if (g_selectedNode)
    {
      g_selectedNode.classList.remove("selected");
      if (g_selectedNode.inputElement && g_selectedNode.inputElement == document.activeElement)
        g_selectedNode.inputElement.blur();
    }
  g_selectedNode = undefined;
}

function nodeClicked(event)
{
  selectNode(this.parentElement, false);
}

function appendPromptAndName(element, node, promptPrefix, promptSuffix, prefix, suffix)
{
  var promptElement = document.createElement("SPAN");
  element.parentElement.prompt = node.prompt;
  promptElement.classList.add("prompt");
  var textNode = document.createTextNode(promptPrefix + node.prompt + promptSuffix);
  promptElement.appendChild(textNode);
  element.appendChild(promptElement);
  if (node.name && node.name.indexOf("__ANON") != 0)
    {
      var nameElement = document.createElement("SPAN");
      nameElement.classList.add("name");
      var nameTextNode = document.createTextNode(prefix + "<" + node.name + ">" + suffix);
      nameElement.appendChild(nameTextNode);
      element.appendChild(nameElement);
    }
  if (node.info)
    {
      var infoElement = document.createElement("SPAN");
      infoElement.classList.add("info");
      var infoTextNode = document.createTextNode(prefix + "[" + node.info +"]" + suffix);
      infoElement.appendChild(infoTextNode);
      element.appendChild(infoElement);
    }
}

function setSearchText(divElement, node)
{
  var searchText = node.prompt.toLowerCase();
  if (node.name)
    searchText += " " + node.name.toLowerCase();
  divElement.searchText = searchText;
}

function filterSocSelection(node)
{
  return node.prompt.indexOf("Nordic") != 0;
}

function filterArchitecture(node)
{
  return node.prompt.indexOf("ARM") != 0;
}

function updateHTML(nodes, parentElement, parentID, filter)
{
  var divElement;
  var spanElement;
  var createElements;
  var shownNodes = false;

  if (parentElement.populated)
    {
      createElements = false;
      divElement = parentElement.firstElementChild;
      while (divElement && divElement.tagName != "DIV")
        divElement = divElement.nextElementSibling;
    }
  else
    {
      createElements = true;
      parentElement.populated = true;
    }

  $.each(nodes, function(i, node)
    {
      if (!filter || !filter(node))
        {
          if (createElements)
            {
              var title;
              if (node.name)
                title = "<" + node.name +">";
              if (node.help)
                {
                  if (title)
                    title += "\n" + node.help;
                  else
                    title = node.help;
                }
              if (node.info)
                {
                  if (title)
                    title += "\n[" + node.info + "]";
                  else
                    title = "[" + node.info + "]";
                }
              divElement = document.createElement("DIV");
              divElement.classList.add("node");
              divElement.setAttribute("id", node.prompt);
              if (title)
                divElement.setAttribute("title", title);
              parentElement.appendChild(divElement);
              spanElement = document.createElement("SPAN");
              spanElement.addEventListener('click', nodeClicked);
              divElement.appendChild(spanElement);
            }

          if (g_showAll)
            {
              divElement.classList.remove("hidden");
              if (node.shown)
                divElement.classList.remove("disabled");
              else
                divElement.classList.add("disabled");
            }
          else if (node.shown)
            {
              divElement.classList.remove("hidden");
              shownNodes = true;
            }
          else
            divElement.classList.add("hidden");

          if (node.type == "choice")
            {
              if (createElements)
                {
                  divElement.inputElement = document.createElement("INPUT");
                  divElement.inputElement.type = "radio";
                  divElement.inputElement.name = parentID;
                  divElement.inputElement.value = node.name;
                  divElement.inputElement.addEventListener('click', radiobuttonClicked);
                  spanElement.appendChild(divElement.inputElement);
                  appendPromptAndName(spanElement, node, " ", "", " ", "");
                  setSearchText(divElement, node);
                }

              if (node.value != 0)
                divElement.inputElement.checked = true;
              else
                divElement.inputElement.checked = false;

              divElement.inputElement.disabled = !node.shown;
            }
          else if (node.type == "bool")
            {
              if (createElements)
                {
                  divElement.classList.add("bool");
                  divElement.inputElement = document.createElement("INPUT");
                  divElement.inputElement.type = "checkbox";
                  divElement.inputElement.name = node.name;
                  divElement.inputElement.value = node.value;
                  divElement.inputElement.addEventListener('click', checkboxClicked);
                  spanElement.appendChild(divElement.inputElement);
                  appendPromptAndName(spanElement, node, " ", "", " ", "");
                  setSearchText(divElement, node);
                }

              if (node.value != 0)
                divElement.inputElement.checked = true;
              else
                divElement.inputElement.checked = false;

              if (node.assignable != 0)
                divElement.classList.add("assignable");
              else
                divElement.classList.remove("assignable");
                
              divElement.inputElement.disabled = !node.shown;
            }
          else if (node.type == "string" || node.type == "int" || node.type == "hex")
            {
              if (createElements)
                {
                  divElement.inputElement = document.createElement("INPUT");
                  divElement.inputElement.type = "text";
                  divElement.inputElement.name = node.name;
                  divElement.inputElement.addEventListener('change', stringChanged);
                  divElement.inputElement.addEventListener('keyup', function(event) {
                    if (event.keyCode === 13)
                      event.target.blur();
                  });
                  appendPromptAndName(spanElement, node, "\u25A0 ", " ", "", " ");
                  spanElement.appendChild(divElement.inputElement);
                  setSearchText(divElement, node);
                }
              if (node.value)
                divElement.inputElement.value = node.value;
              else
                divElement.inputElement.value = "";
              divElement.inputElement.disabled = !node.shown;
            }
          else if (node.type == "menu")
            {
              if (createElements)
                {
                  appendPromptAndName(spanElement, node, "", " ", "", " ");
                  divElement.classList.add("menu");
                }
            }
          else if (node.type == "comment")
            {
              if (createElements)
                {
                  appendPromptAndName(spanElement, node, "", " ", "", " ");
                  divElement.classList.add("comment");
                }
            }
          else
            {
              if (createElements)
                appendPromptAndName(spanElement, node, "", " ", "", " ");
            }

          if (g_showAll || shownNodes)
            parentElement.classList.remove("empty");
          else
            parentElement.classList.add("empty");

          if (createElements && (node.children || node.menu))
            {
              divElement.classList.add("fold");
              divElement.classList.add("empty");
              divElement.addEventListener('click', toggleFold);
            }

          if (node.children)
            {
              if (node.shown || g_showAll)
                {
                  var childFilter;
                  if (node.prompt == "SoC/CPU/Configuration Selection")
                    childFilter = filterSocSelection;
                  else if (node.prompt == "Architecture")
                    childFilter = filterArchitecture;
                  updateHTML(node.children, divElement, parentID + "_" + i, childFilter);
                }
            }

          if (!createElements)
            divElement = divElement.nextElementSibling;
        }
    });
}

function standardOutputAvailable()
{
  while (process.canReadStandardOutputLine())
    {
      var str = process.readStandardOutputLine();
      if (str.indexOf("json_tree:") == 0)
        {
          try
            {
              var data = jQuery.parseJSON(str.slice(10));
            }
          catch (xcp)
            {
              alert(xcp);
            }
          updateHTML(data, g_mainDiv, "id");
          if (!g_selectedNode)
            selectNode(getFirstChildNode(g_mainDiv));
        }
      else if (str.indexOf("config_filename:") == 0)
        {
          g_configFilePath = str.slice(16);
          g_menuconfigStarted = true;
        }
    }
}

function standardErrorAvailable()
{
  if (g_menuconfigStarted)
    alert(process.readStandardError());
  else
    console.log("stderr: " + process.readStandardError());
}

function configureSolution()
{
  studio.setBusy(true);
  $(".w3-input, .w3-btn, .w3-check").addClass("w3-disabled");
  kconfigWriteConfig(g_configFilePath);
  studio.reloadSolution();
  closeDialog(1)
}

function loadConfiguration()
{
  if (g_loadConfigFilePath == "")
    g_loadConfigFilePath = g_configFilePath;

  var configFilePath = studio.browseExistingFileName("Load Configuration", g_loadConfigFilePath);
  if (configFilePath != "")
    {
      g_loadConfigFilePath = configFilePath;
      kconfigLoadConfig(g_loadConfigFilePath);
      kconfigGetTree();
    }
}

function saveConfiguration()
{
  if (g_saveConfigFilePath == "")
    g_saveConfigFilePath = g_configFilePath;

  var configFilePath = studio.browseSaveFileName("Save Configuration As", g_saveConfigFilePath);
  if (configFilePath != "")
    {
      g_saveConfigFilePath = configFilePath;
      kconfigWriteConfig(g_saveConfigFilePath);
    }
}

function getPythonVersion(cmd)
{
  var result = 0;
  if (process.start(cmd, "--version"))
    {
      if (process.waitForFinished(1000))
        {
          var output = process.readStandardOutput();
          var version = output.match(/(\d+)\.(\d+)\.(\d+)/);
          if (version)
            {
              var majorVersion = version[1];
              if (majorVersion != "")
                result = parseInt(majorVersion);
            }
        }
      else
        process.kill()
    }
  return result;
}

function closeDialog(result)
{
  if (process.isRunning())
    {
      kconfigQuit();
      process.waitForFinished(10000);
    }
  studio.closeWindow(result);
}

function setModalHtml(modalHtml)
{
  if (modalHtml != "")
    {
      if ($('.dialog-modal').length == 0)
        $('body').append('<div class="dialog-modal w3-modal w3-show"><div class="w3-modal-content"><div class="w3-container w3-light-grey">' + modalHtml + '</div></div></div>');
    }
  else
    $('.dialog-modal').remove();
}

function filterTree()
{
  var keywords = g_filterInput.value;
  var element = $("div.main");
  var nodes = $(".node", element);

  var selectedNodeY = -1;

  if (nodeIsVisible(g_selectedNode))
    selectedNodeY = getNodeY(g_selectedNode);

  if (keywords.length == 0)
    {
      nodes.removeClass("filtered");
    }
  else
    {
      var andKeywords = keywords.toLowerCase().replace(/[\"]/g, "").split(/[\s\+]/g);
      nodes.addClass("filtered");
      nodes.removeClass("open");

      nodes.each(function(i, node)
        {
          if (node.searchText && !node.classList.contains("hidden"))
            {
              var text = node.searchText;
              var show = true;
              for (j = 0; j < andKeywords.length; j++)
                {
                  var orKeywords = andKeywords[j].split("|");
                  var result = false;
                  for (k = 0; k < orKeywords.length; k++)
                    {
                      var keyword = orKeywords[k];
                      if (keyword[0] == '!')
                        {
                          if (text.indexOf(keyword.substring(1)) < 0)
                            result = true;
                        }
                      else
                        {
                          if (text.indexOf(keyword) >= 0)
                            result = true;
                        }
                    }
                  if (!result)
                    show = false;
                }
              if (show)
                {
                  while (node)
                    {
                      if (!node.classList.contains("filtered"))
                        break;
                      node.classList.remove("filtered");
                      if (node.classList.contains("fold"))
                        node.classList.add("open");
                      node = node.parentElement;
                    }
                }
            }
        });
    }

  if (nodeIsVisible(g_selectedNode))
    {
      if (selectedNodeY >= 0)
        setNodeY(g_selectedNode, selectedNodeY);
      ensureSelectedNodeVisible();
    }
}

function filterUpdated()
{
  clearTimeout(g_filterTimer);
  g_filterTimer = setTimeout(filterTree, 250);
}

function setShowAll(show)
{
  if (g_showAll != show)
    {
      studio.setUserSetting("Nordic/Configure/Show All", show);
      g_showAll = show;
      kconfigGetTree();
    }
}

function setShowNames(show, update)
{
  if (show)
    g_mainDiv.classList.add("show-names");
  else
    g_mainDiv.classList.remove("show-names");
  if (update)
    studio.setUserSetting("Nordic/Configure/Show Names", show);
}

function setShowInfo(show, update)
{
  if (show)
    g_mainDiv.classList.add("show-info");
  else
    g_mainDiv.classList.remove("show-info");
  if (update)
    studio.setUserSetting("Nordic/Configure/Show Symbol Information", show);
}

function elementIsNode(element)
{
  return element && element.classList.contains("node");
}

function nodeIsVisible(node)
{
  return elementIsNode(node) && !node.classList.contains("hidden") && !node.classList.contains("filtered");
}

function nodeIsSelectable(node)
{
  return nodeIsVisible(node) && !node.classList.contains("comment");
}

function getFirstChildNode(node)
{
  if (node)
    {
      node = node.firstElementChild;
      while (node && !nodeIsSelectable(node))
        node = node.nextElementSibling;
    }
  return node;
}

function getLastChildNode(node)
{
  if (node)
    {
      node = node.lastElementChild;
      while (node && !nodeIsSelectable(node))
        node = node.previousElementSibling;
    }
  return node;
}

function getNextNode(node)
{
  if (node)
    {
      node = node.nextElementSibling;
      while (node && !nodeIsSelectable(node))
        node = node.nextElementSibling;
    }
  return node;
}

function getPreviousNode(node)
{
  if (node)
    {
      node = node.previousElementSibling;
      while (node && !nodeIsSelectable(node))
        node = node.previousElementSibling;
    }
  return node;
}

function onKey(e)
{
  if (document.activeElement != g_filterInput)
    {
      switch (e.keyCode)
        {
          case 13: // Enter Key
          case 32: // Space Key
            if (g_selectedNode)
              {
                if (g_selectedNode.inputElement && (g_selectedNode.inputElement.type == "radio" || (g_selectedNode.inputElement.type == "checkbox" && g_selectedNode.classList.contains("assignable"))))
                  {
                    if (g_selectedNode.classList.contains("fold") && !g_selectedNode.classList.contains("open") && !g_selectedNode.classList.contains("empty"))
                      g_selectedNode.classList.add("open");
                    else
                      g_selectedNode.inputElement.click();
                  }
                else if (g_selectedNode.classList.contains("fold"))
                  g_selectedNode.classList.toggle("open");
                e.preventDefault();
              }
            break;

          case 37: // Left Key
            if (!document.activeElement || document.activeElement.type != "text")
              {
                if (!g_selectedNode || !nodeIsVisible(g_selectedNode))
                  {
                    selectNode(getFirstChildNode(g_mainDiv));
                  }
                else
                  {
                    if (g_selectedNode && g_selectedNode.classList.contains("fold") && g_selectedNode.classList.contains("open"))
                      g_selectedNode.classList.remove("open");
                    else
                      {
                        var node = g_selectedNode.parentElement;
                        if (node)
                          selectNode(node, true);
                      }
                  }
                e.preventDefault();
              }
            break;

          case 39: // Right Key
            if (!document.activeElement || document.activeElement.type != "text")
              {
                if (!g_selectedNode || !nodeIsVisible(g_selectedNode))
                  {
                    selectNode(getFirstChildNode(g_mainDiv));
                  }
                else
                  {
                    if (g_selectedNode.classList.contains("open"))
                      {
                        var node = getFirstChildNode(g_selectedNode);
                        if (node)
                          selectNode(node, true);
                      }
                    else
                      g_selectedNode.classList.add("open");
                  }
                e.preventDefault();
              }
            break;

          case 38: // Up Key
            if (!g_selectedNode || !nodeIsVisible(g_selectedNode))
              {
                selectNode(getFirstChildNode(g_mainDiv));
              }
            else
              {
                var startNode = g_selectedNode;
                var node = getPreviousNode(startNode);

                var leafNode = node;
                while (leafNode && leafNode.classList.contains("fold") && leafNode.classList.contains("open"))
                  leafNode = getLastChildNode(leafNode);
                if (leafNode)
                  node = leafNode; 

                if (!node)
                  node = startNode.parentElement;
                
                if (node)
                  selectNode(node, true);
              }
            e.preventDefault();
            break;

          case 40: // Down Key
            if (!g_selectedNode || !nodeIsVisible(g_selectedNode))
              {
                selectNode(getFirstChildNode(g_mainDiv));
              }
            else
              {
                var startNode = g_selectedNode;
                var node;

                if (startNode.classList.contains("fold") && startNode.classList.contains("open"))
                  node = getFirstChildNode(startNode);

                while (!node && startNode)
                  {
                    node = getNextNode(startNode);
                    if (!node)
                      startNode = startNode.parentElement;
                  }

                if (node)
                  selectNode(node, true);
              }
            e.preventDefault();
            break;
        }
    }
}

function configureTarget(target)
{
  var ninjaCommand = studio.getEnvironmentSetting("Nordic/NinjaExecutable");
  if (ninjaCommand == "")
    ninjaCommand = "ninja";
  process.standardOutputAvailable.connect(standardOutputAvailable);
  process.standardErrorAvailable.connect(standardErrorAvailable);
  process.finished.connect(processFinished);
  process.setWorkingDirectory(g_buildDirectory);
  process.setEnvironmentVariable("ZEPHYR_BASE", g_zephyrBase);
  process.setEnvironmentVariable("PYTHONPATH", g_zephyrBase + "/scripts/kconfig");
  process.setEnvironmentVariable("PYTHONIOENCODING", "utf8");
  var args = [target];
  if (!process.start(ninjaCommand, args))
    throw "Cannot start \"" + ninjaCommand + "\"";
  kconfigGetTree();
}

$(document).ready(function() {

  studio.createProcessObject("process");
  document.onkeydown = onKey;

  try
    {
      g_filterInput = $('#filter')[0];
      g_mainDiv = $("div.main")[0];
      g_breadcrumbDiv = $("div.breadcrumb")[0];
      var style = window.getComputedStyle(g_mainDiv);
      g_mainDivMarginTop = parseInt(style.marginTop, 10);
      g_mainDivMarginBottom = parseInt(style.marginBottom, 10);

      g_zephyrBase = studio.getSolutionAttribute("source_directory");
      g_boardDirectory = studio.getSolutionAttribute("board_directory");
      g_buildDirectory = studio.getSolutionAttribute("build_directory");
      g_configFilePath = g_buildDirectory + "/zephyr/.config";

      if (g_zephyrBase == "" || g_boardDirectory == "" || g_buildDirectory == "")
        throw "Current project is not a Zephyr project";

      g_showAll = studio.getUserSetting("Nordic/Configure/Show All") == "true";
      $("#show-all-checkbox").prop("checked", g_showAll);

      var showNames = studio.getUserSetting("Nordic/Configure/Show Names") == "true";
      $("#show-names-checkbox").prop("checked", showNames);
      setShowNames(showNames, false);

      var showInfo = studio.getUserSetting("Nordic/Configure/Show Symbol Information") == "true";
      $("#show-info-checkbox").prop("checked", showInfo);
      setShowInfo(showInfo, false);

      var ninjaFile = studio.readFileToString(g_buildDirectory + "/build.ninja");
      var re = /\s+(\w*menuconfig\w*_ses):/g;
      var targets = new Array();
      var match;
      do
        {
          match = re.exec(ninjaFile);
          if (match && targets.indexOf(match[1]) === -1)
            targets.push(match[1]);
        }
      while (match);

      if (targets.length == 1)
        {
          configureTarget(targets[0]);
        }
      else if (targets.length > 1)
        {
          var s = "";
          for (var i in targets)
            s += "<div class='w3-section w3-padding'><button class='w3-btn w3-round w3-white w3-border w3-block' onclick='setModalHtml(\"\"); configureTarget(\"" + targets[i] + "\")'>" + targets[i].slice(0, -4) + "</button></div>";
          setModalHtml("<div class='w3-section'>Select the target to configure:</div>" + s);
        }
      else
        {
          // Using a version that doesn't allow menuconfig.py to be overridden
          // so revert to old scheme.
          var pythonCommand = studio.getEnvironmentSetting("Nordic/PythonExecutable");
          if (pythonCommand == "")
            {
              pythonCommand = "python3";
              var pythonVersion = getPythonVersion(pythonCommand);
              if (!pythonVersion)
                {
                  pythonCommand = "python";
                  pythonVersion = getPythonVersion(pythonCommand);
                }

              if (pythonVersion < 3)
                throw("Cannot find Python version 3 on the PATH");
            }

          var kernelVersionFile = studio.readFileToString(g_zephyrBase + "/VERSION");
          if (!kernelVersionFile)
            throw "Cannot open kernel version file"
          var kernelVersionMajor;
          var kernelVersionMinor;
          var kernelPatchLevel;
          var kernelVersionTweak;
          var found = kernelVersionFile.match(/VERSION_MAJOR = (\d+)/)
          if (found)
            {
              kernelVersionMajor = parseInt(found[1]);
              found = kernelVersionFile.match(/VERSION_MINOR = (\d+)/)
              if (found)
                {
                  kernelVersionMinor = parseInt(found[1]);
                  found = kernelVersionFile.match(/PATCHLEVEL = (\d+)/)
                  if (found)
                    {
                      kernelPatchLevel = parseInt(found[1]);
                      found = kernelVersionFile.match(/VERSION_TWEAK = (\d+)/)
                      if (found)
                        kernelVersionTweak = parseInt(found[1]);
                    }
                }
            }
          if (kernelVersionMajor === undefined || kernelVersionMinor === undefined || kernelPatchLevel === undefined || kernelVersionTweak === undefined)
            throw "Cannot get kernel version"

          process.standardOutputAvailable.connect(standardOutputAvailable);
          process.standardErrorAvailable.connect(standardErrorAvailable);
          process.finished.connect(processFinished);
          process.setEnvironmentVariable("PYTHONPATH", g_zephyrBase + "/scripts/kconfig");
          process.setEnvironmentVariable("PYTHONIOENCODING", "utf8");
          process.setEnvironmentVariable("srctree", g_zephyrBase);
          process.setEnvironmentVariable("ZEPHYR_BASE", g_zephyrBase);
          process.setEnvironmentVariable("KERNELVERSION", "0x" + (kernelVersionMajor << 24 | kernelVersionMinor << 16 | kernelPatchLevel << 8 | kernelVersionTweak).toString(16).toUpperCase());
          process.setEnvironmentVariable("KCONFIG_CONFIG", g_configFilePath);
          process.setEnvironmentVariable("ARCH", "arm");
          process.setEnvironmentVariable("ARCH_DIR", g_zephyrBase + "/arch");
          process.setEnvironmentVariable("BOARD_DIR", g_boardDirectory);
          process.setEnvironmentVariable("PROJECT_BINARY_DIR", g_buildDirectory + "/zephyr");
          process.setEnvironmentVariable("SOC_DIR", g_zephyrBase + "/soc");
          process.setEnvironmentVariable("GENERATED_DTS_BOARD_CONF", g_buildDirectory + "/zephyr/include/generated/generated_dts_board.conf");

          var args = [studio.getSystemMacro("StudioDir") + "/html/configure_nordic_project_menuconfig.py", g_zephyrBase + "/Kconfig", g_configFilePath];

          if (!process.start(pythonCommand, args))
            throw "Cannot start \"" + pythonCommand + "\"";

          kconfigGetTree();
        }
    }
  catch(err)
    {
      studio.showErrorMessageBox("Cannot configure project", err + ".");
      closeDialog(0);
    }
});

    </script>
  </head>

  <body>
    <div class="header w3-light-blue">
      <span>
        <img style="padding-right: 10px" src="images/nRFConnectLogo.png" align="left" />
        <div style="padding-top: 10px">
          <div class="w3-text-white w3-xlarge">Configure nRF Connect SDK Project</div>
          <div class="breadcrumb"></div>
        </div>
        <div style="position: fixed; top: 20px; right: 20px;">
          <form onsubmit="return false;">
            <input id="filter" class="w3-input w3-border w3-white" placeholder="Filter" oninput="filterUpdated()" type="text">
          </form>
        </div>
      </span>
    </div>

    <div class="main w3-white">
    </div>

    <div class="footer w3-light-grey">
      <div class="w3-section w3-padding w3-left">
         <input type="checkbox" id="show-names-checkbox" onclick="setShowNames(this.checked, true);"> Show Names</input>&nbsp;
         <input type="checkbox" id="show-info-checkbox" onclick="setShowInfo(this.checked, true);"> Show Symbols</input><br/>
         <input type="checkbox" id="show-all-checkbox" onclick="setShowAll(this.checked);"> Show All</input><br/>
      </div>
      <div class="w3-section w3-padding w3-right">
        <span class="w3-btn w3-round w3-white w3-border w3-medium" title="Load configuration file" onclick="loadConfiguration()">Load</span>
        <span class="w3-btn w3-round w3-white w3-border w3-medium" title="Save configuration file" onclick="saveConfiguration()">Save As</span>
        <span class="w3-btn w3-round w3-white w3-border w3-medium" title="Save configuration file and configure project" onclick="configureSolution()">Configure</span>
        <span class="w3-btn w3-round w3-white w3-border w3-medium" title="Cancel configuration" onclick="closeDialog(0);">Cancel</span>
      </div>
    </div>

  </body>
</html>

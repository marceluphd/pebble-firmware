<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
  <head>
    <title>Customizing putchar</title>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/>
    <meta content="RAL PrepHTML" name="GENERATOR"/>
    
    
    <link rel="STYLESHEET" type="text/css" href="./rwt/styles/ses-default.css"/>
    <link rel="STYLESHEET" type="text/css" href="./rwt/styles/ses.css"/>
    <link rel="STYLESHEET" type="text/css" href="./rwt/styles/rwt-doc-page.css"/>
    <link rel="STYLESHEET" type="text/css" href="./rwt/styles/theme.css"/>
    <script type="text/javascript" language="javascript" src="./rwt/scripts/jquery-latest.js"><!--><-->
</script>
    <script type="text/javascript" language="javascript" src="./rwt/scripts/rwt.js"><!--><-->
</script>
    <script type="text/javascript" language="javascript" src="./rwt/scripts/rwt-doc-page.js"><!--><-->
</script>
    
  </head>

  <body>
    <div id="rwt-content">
      
<p>To use the standard output functions <b>putchar</b>, <b>puts</b>, and <b>printf</b>,
you need to customize the way that characters are written to the standard output 
device. These output functions rely on a function <b>__putchar</b> that outputs 
a character and returns an indication of whether it was successfully written.</p><p>The prototype for <b>__putchar</b> is</p>
<pre class="rwt-code"><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-function">__putchar</span><span class="rwt-code-operator">(</span><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">ch</span><span class="rwt-code-operator">);</span></pre><h3>Sending all output to the SEGGER Embedded Studio virtual terminal</h3><p>You can send all output to the SEGGER Embedded Studio virtual terminal by supplying the 
following implementation of the<b>__putchar</b> function in your code:</p>
<pre class="rwt-code"><span class="rwt-code-control">#include</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">&lt;</span><span class="rwt-code-text">debugio</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">h</span><span class="rwt-code-operator">></span>

<span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-function">__putchar</span><span class="rwt-code-operator">(</span><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">ch</span><span class="rwt-code-operator">)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">return</span><span class="rwt-code-text"> </span><span class="rwt-code-function">debug_putchar</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">ch</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-operator">}</span></pre><p>This hands off output of the character <b>ch</b> to the low-level debug output
routine, <b>debug_putchar</b>.</p><p>Whilst this is an adequate implementation of <b>__putchar</b>, it 
does consume stack space for an unnecessary nested call and
associated register saving. A better way of achieving the same
result is to define the low-level symbol for <b>__putchar</b> to be
equivalent to the low-level symbol for <b>debug_putchar</b>.
To do this, we need to instruct the linker to make the symbols equivalent.</p><ul><li>Select the project node in the <b>Project Explorer</b>.
</li>
<li>Display the <b>Properties Window</b>.
</li>
<li>Enter the text <tt>__putchar=debug_putchar</tt> into the
<b>Linker > Linker Symbol Definitions</b> property of the <b>Linker Options</b>
group.</li></ul><h3>Sending all output to another device</h3><p>If you need to output to a physical device, such as a UART, the following
notes will help you:</p><ul><li>If the character cannot be written for any reason, <b>putchar</b>
  <i>must</i> return <b>EOF</b>.  Just because a character can't be written
  immediately is not a reason to return <b>EOF</b>: you can busy-wait or
  tasking (if applicable) to wait until the character is ready to be
  written.
</li>
<li>The higher layers of the library do not translate C's end of line
  character '<b>\\n</b>' before passing it to <b>putchar</b>. If you are directing
  output to a serial line connected to a terminal, for instance, you will
  most likely need to output a carriage return and line feed when given
  the character '<b>\\n</b>' (ASCII code 10).</li></ul><h3/><p>The standard functions that perform input and output are the <b>printf</b> and <b>scanf</b> 
functions.These functions convert between internal binary and external printable 
data. In some cases, though, you need to read and write formatted data on other 
channels, such as other RS232 ports. This section shows how you can extend the 
I/O library to best implement these function.</p><h5>Classic custom printf-style output</h5><p>Assume that we need to output formatted data to two UARTs, numbered 0 and 1, 
and we have a functions <b>uart0_putc</b> and <b>uart1_putc</b> that do just 
that and whose prototypes are:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-function">uart0_putc</span><span class="rwt-code-operator">(</span><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">ch</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">__printf_t </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">ctx</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-function">uart1_putc</span><span class="rwt-code-operator">(</span><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">ch</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">__printf_t </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">ctx</span><span class="rwt-code-operator">);</span></pre><p>These functions return a positive value if there is no error outputting the 
character and EOF if there was an error.  The second parameter, <tt>ctx</tt>,
is the <i>context</i> that the high-level formatting routines use to implement
the C standard library functions.</p><p>Using a classic implementation, you would use <b>sprintf</b> to format the 
string for output and then output it:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">void</span><span class="rwt-code-text"> </span><span class="rwt-code-function">uart0_printf</span><span class="rwt-code-operator">(</span><span class="rwt-code-keyword">const</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">...)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-text">buf</span><span class="rwt-code-operator">[</span><span class="rwt-code-literal">80</span><span class="rwt-code-operator">],</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">p</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">va_list </span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-function">va_start</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-function">vsnprintf</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">buf</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">sizeof</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">buf</span><span class="rwt-code-operator">),</span><span class="rwt-code-text"> </span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-keyword">for</span><span class="rwt-code-function"> </span><span class="rwt-code-operator">(</span><span class="rwt-code-text">p </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">buf</span><span class="rwt-code-operator">;</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">p</span><span class="rwt-code-operator">;</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">++</span><span class="rwt-code-text">p</span><span class="rwt-code-operator">)</span>
    <span class="rwt-code-function">uart0_putc</span><span class="rwt-code-operator">(*</span><span class="rwt-code-text">p</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">);</span><span class="rwt-code-text">  </span><span class="rwt-code-comment">// </span><span class="rwt-code-comment">null </span><span class="rwt-code-comment">context</span>
  <span class="rwt-code-function">va_end</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-operator">}</span></pre><p>We would, of course, need an identical routine for outputting to the other 
UART. This code is portable, but it requires an intermediate buffer of 80 characters. 
On small systems, this is quite an overhead, so we could reduce the buffer size 
to compensate. Of course, the trouble with that means that the maximum number 
of characters that can be output by a single call to <b>uart0_printf</b> is 
also reduced. What would be good is a way to output characters to one of the 
UARTs without requiring an intermediate buffer.</p><h5>SEGGER Embedded Studio for ARM printf-style output</h5><p>SEGGER Embedded Studio for ARM provides a solution for just this case by using some internal functions 
and data types in the SEGGER Embedded Studio for ARM library. These functions and types are define 
in the header file &lt;__vfprintf.h>.</p><p>The first thing to introduce is the <b>__printf_t</b> type which captures the current
state and parameters of the format conversion:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">typedef</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">struct</span><span class="rwt-code-text"> </span><span class="rwt-code-text">__printf_tag</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">size_t</span><span class="rwt-code-text"> </span><span class="rwt-code-text">charcount</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-keyword">size_t</span><span class="rwt-code-text"> </span><span class="rwt-code-text">maxchars</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">string</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-keyword">int</span><span class="rwt-code-function"> </span><span class="rwt-code-operator">(*</span><span class="rwt-code-text">output_fn</span><span class="rwt-code-operator">)(</span><span class="rwt-code-keyword">int</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">struct</span><span class="rwt-code-text"> </span><span class="rwt-code-text">__printf_tag </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">ctx</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-operator">}</span><span class="rwt-code-text"> </span><span class="rwt-code-text">__printf_t</span><span class="rwt-code-operator">;</span></pre><p>This type is used by the library functions to direct what the formatting routines 
do with each character they need to output.  If <tt>string</tt> is non-zero, the character
is appended is appended to the string pointed to by <b>string</b>; if <tt>output_fn</tt> is
non-zero, the character is output through the function <b>output_fn</b> with the context
passed as the second parameter.</p><p>The member  <b>charcount</b> counts the number of characters currently output, and <b>maxchars</b> 
defines the maximum number of characters output by the formatting routine <b>__vfprintf</b>.</p><p>We can use this type and function to rewrite <b>uart0_printf</b>:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-function">uart0_printf</span><span class="rwt-code-operator">(</span><span class="rwt-code-keyword">const</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">...)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">n</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">va_list </span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">__printf_t </span><span class="rwt-code-text">iod</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-function">va_start</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-text">iod</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">string </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">iod</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">maxchars </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">INT_MAX</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">iod</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">output_fn </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">uart0_putc</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">n </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-function">__vfprintf</span><span class="rwt-code-operator">(\&amp;</span><span class="rwt-code-text">iod</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-function">va_end</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-keyword">return</span><span class="rwt-code-text"> </span><span class="rwt-code-text">n</span><span class="rwt-code-operator">;</span>
<span class="rwt-code-operator">}</span></pre><p>This function has no intermediate buffer: when a character is ready to be output 
by the formatting routine, it calls the <b>output_fn</b> function in the descriptor
<b>iod</b> to output it immediately. The maximum number of characters isn't 
limited as the <b>maxchars</b> member is set to <b>INT_MAX</b>. if you wanted 
to limit the number of characters output you can simply set the <b>maxchars</b> 
member to the appropriate value before calling <b>__vfprintf</b>.</p><p>We can adapt this function to take a UART number as a parameter:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-function">uart_printf</span><span class="rwt-code-operator">(</span><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">uart</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">const</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">...)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">n</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">va_list </span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">__printf_t </span><span class="rwt-code-text">iod</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-function">va_start</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-text">iod</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">is_string </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">iod</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">maxchars </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">INT_MAX</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">iod</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">output_fn </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">uart </span><span class="rwt-code-operator">?</span><span class="rwt-code-text"> </span><span class="rwt-code-text">uart1_putc </span><span class="rwt-code-operator">:</span><span class="rwt-code-text"> </span><span class="rwt-code-text">uart0_putc</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">n </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-function">__vfprintf</span><span class="rwt-code-operator">(\&amp;</span><span class="rwt-code-text">iod</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-function">va_end</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">ap</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-keyword">return</span><span class="rwt-code-text"> </span><span class="rwt-code-text">n</span><span class="rwt-code-operator">;</span>
<span class="rwt-code-operator">}</span></pre><p>Now we can use:</p>
<pre class="rwt-code"><span class="rwt-code-function">uart_printf</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"This is uart %d\n..."</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-function">uart_printf</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">1</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"..and this is uart %d\n"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">1</span><span class="rwt-code-operator">);</span></pre><p><b>__vfprintf</b> returns the actual number of characters printed, which you 
may wish to dispense with and make the <b>uart_printf</b> routine return <b>void</b>.</p><h5>Extending input functions</h5><p>The formatted input functions would be implemented in the same manner as the 
output functions: read a string into an intermediate buffer and parse using 
<b>sscanf</b>. However, we can use the low-level routines in the SEGGER Embedded Studio for ARM 
library for formatted input without requiring the intermediate buffer.</p><p>The type <b>__stream_scanf_t</b> is:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">typedef</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">struct</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-text">is_string</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-keyword">int</span><span class="rwt-code-function"> </span><span class="rwt-code-operator">(*</span><span class="rwt-code-text">getc_fn</span><span class="rwt-code-operator">)(</span><span class="rwt-code-keyword">void</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-keyword">int</span><span class="rwt-code-function"> </span><span class="rwt-code-operator">(*</span><span class="rwt-code-text">ungetc_fn</span><span class="rwt-code-operator">)(</span><span class="rwt-code-keyword">int</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-operator">}</span><span class="rwt-code-text"> </span><span class="rwt-code-text">__stream_scanf_t</span><span class="rwt-code-operator">;</span></pre><p>The function <b>getc_fn</b> reads a single character from the UART, and <b>ungetc_fn</b>
pushes back a character to the UART. You can push at most one character back 
onto the stream.</p><p>Here's an implementation of functions to read and write from a single UART:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">static</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">uart0_ungot </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">EOF</span><span class="rwt-code-operator">;</span>

<span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-function">uart0_getc</span><span class="rwt-code-operator">(</span><span class="rwt-code-keyword">void</span><span class="rwt-code-operator">)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">if</span><span class="rwt-code-function"> </span><span class="rwt-code-operator">(</span><span class="rwt-code-text">uart0_ungot</span><span class="rwt-code-operator">)</span>
    <span class="rwt-code-operator">{</span>
      <span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">c </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">uart0_ungot</span><span class="rwt-code-operator">;</span>
      <span class="rwt-code-text">uart0_ungot </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">EOF</span><span class="rwt-code-operator">;</span>
      <span class="rwt-code-keyword">return</span><span class="rwt-code-text"> </span><span class="rwt-code-text">c</span><span class="rwt-code-operator">;</span>
    <span class="rwt-code-operator">}</span>
  <span class="rwt-code-keyword">else</span>
    <span class="rwt-code-keyword">return</span><span class="rwt-code-text"> </span><span class="rwt-code-function">read_char_from_uart</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-operator">}</span></pre>
<pre class="rwt-code"><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">uart0_ungetc</span><span class="rwt-code-operator">{</span><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">c</span><span class="rwt-code-operator">)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-text">uart0_ungot </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">c</span><span class="rwt-code-operator">;</span>
<span class="rwt-code-operator">}</span></pre><p>You can use these two functions to perform formatted input using the UART:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-function">uart0_scanf</span><span class="rwt-code-operator">(</span><span class="rwt-code-keyword">const</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">...)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-text">__stream_scanf_t </span><span class="rwt-code-text">iod</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">va_list </span><span class="rwt-code-text">a</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-keyword">int</span><span class="rwt-code-text"> </span><span class="rwt-code-text">n</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-function">va_start</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">a</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-text">iod</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">is_string </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">iod</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">getc_fn </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">uart0_getc</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">iod</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">ungetc_fn </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">uart0_ungetc</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-text">n </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-function">__vfscanf</span><span class="rwt-code-operator">((</span><span class="rwt-code-text">__scanf_t </span><span class="rwt-code-operator">*)\&amp;</span><span class="rwt-code-text">iod</span><span class="rwt-code-operator">,</span><span class="rwt-code-function"> </span><span class="rwt-code-operator">(</span><span class="rwt-code-keyword">const</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">unsigned</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">*)</span><span class="rwt-code-text">fmt</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">a</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-function">va_end</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">a</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-keyword">return</span><span class="rwt-code-text"> </span><span class="rwt-code-text">n</span><span class="rwt-code-operator">;</span>
<span class="rwt-code-operator">}</span></pre><p>Using this template, we can add functions to do additional formatted input 
from other UARTs or devices, just as we did for formatted output.</p> 
    </div>
  </body>
</html>
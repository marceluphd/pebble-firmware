<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
  <head>
    <title>Threads window</title>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/>
    <meta content="RAL PrepHTML" name="GENERATOR"/>
    
    
    <link rel="STYLESHEET" type="text/css" href="./rwt/styles/ses-default.css"/>
    <link rel="STYLESHEET" type="text/css" href="./rwt/styles/ses.css"/>
    <link rel="STYLESHEET" type="text/css" href="./rwt/styles/rwt-doc-page.css"/>
    <link rel="STYLESHEET" type="text/css" href="./rwt/styles/theme.css"/>
    <script type="text/javascript" language="javascript" src="./rwt/scripts/jquery-latest.js"><!--><-->
</script>
    <script type="text/javascript" language="javascript" src="./rwt/scripts/rwt.js"><!--><-->
</script>
    <script type="text/javascript" language="javascript" src="./rwt/scripts/rwt-doc-page.js"><!--><-->
</script>
    
  </head>

  <body>
    <div id="rwt-content">
      
<p>The <b>Threads</b> window displays the set of executing contexts on the target processor
structured as a set of queues. </p><h5>To activate the Threads window:</h5><ul><li>Choose <b>View > More Debug Windows > Threads</b> or press <b>Ctrl+Alt+H</b>.</li></ul><p>The window is populated using the threads script, which
is a JavaScript program store in a file whose file-type project option is "Threads Script"
(or is called <tt>threads.js</tt>) and is in the project that is being debugged.</p><p>When debugging starts, the threads script is loaded and the <b>function init()</b> is called
to determine which columns are displayed in the <b>Threads</b> window.</p><p>When the application stops on a breakpoint, the function <b>update()</b> is called to
create entries in the <b>Threads</b> window corresponding to the columns that have been
created together with the saved execution context (register state)
of the thread. By double-clicking one of the entries,
the debugger displays its saved execution context&mdash;to put the debugger
back into the default execution context, use <b>Show Next Statement</b>.</p><h5>Writing the threads script</h5><p>The threads script controls the <b>Threads</b> window with the <b>Threads</b> object.</p><p>The methods <b>Threads.setColumns</b>, <b>Threads.setSortByNumber</b> and <b>Threads.setColor</b> 
can be called from the <b>function init()</b>.</p>
<pre class="rwt-code"><span class="rwt-code-keyword">function</span><span class="rwt-code-text"> </span><span class="rwt-code-function">init</span><span class="rwt-code-operator">()</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">setColumns</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"Name"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Priority"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"State"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Time"</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">setSortByNumber</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"Time"</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">setColor</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"State"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Ready"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Executing"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Waiting"</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-operator">}</span></pre><p>The above example creates the named columns <b>Name</b>, <b>Priority</b>, <b>State</b>, and
<b>Time</b> in the <b>Threads</b> window, with the <b>Time</b> column sorted numerically rather
than alphabetically. The states <b>Ready</b>, <b>Executing</b> and <b>Waiting</b> will have 
yellow, green and red colored pixmaps respectively.</p><p>If you don't supply the <b>function init()</b> in the threads script, the <b>Threads</b>
window will create the default columns <b>Name</b>, <b>Priority</b>, and <b>State</b>.</p><p>The methods <b>Threads.clear()</b>, <b>Threads.newqueue()</b>, and <b>Threads.add()</b>
can be called from the <b>function update()</b>.</p><p>The <b>Threads.clear()</b> method clears the <b>Threads</b> window.</p><p>The <b>Threads.newqueue()</b> function takes a string argument and creates a
new, top-level entry in the <b>Threads</b> window. Subsequent entries added
to this window will go under this entry. If you don't call this, new entries will
all be at the top level of the <b>Threads</b> window.</p><p>The <b>Threads.add()</b> function takes a variable number of string arguments, which
should correspond to the number of columns displayed by the <b>Threads</b> window. The last
argument to the <b>Threads.add()</b> function should be an array (possibly empty) containing
the registers of the thread or, alternatively, a handle that can be supplied a call to the
threads script <b>function getregs(handle)</b>, which will return an array when the thread is
selected in the <b>Threads</b> window. The array containing the registers should
have elements in the same order in which they are displayed in the CPU <b>Registers</b>
display&mdash;typically this will be in register-number order, e.g., <b>r0</b>, <b>r1</b>, and so on.</p>
<pre class="rwt-code"><span class="rwt-code-keyword">function</span><span class="rwt-code-text"> </span><span class="rwt-code-function">update</span><span class="rwt-code-operator">()</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">clear</span><span class="rwt-code-operator">();</span>
  <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">newqueue</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"My Tasks"</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">add</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"Task1"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"0"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Executing"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"1000"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">[</span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">1</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">2</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">3</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">4</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">5</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">6</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">7</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">8</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">9</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">10</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">11</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">12</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">13</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">14</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">15</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">16</span><span class="rwt-code-operator">]);</span>
  <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">add</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"Task2"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"1"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Waiting"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"2000"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">[</span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">1</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">2</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">3</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">4</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">5</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">6</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">7</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">8</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">9</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">10</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">11</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">12</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">13</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">14</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">15</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">16</span><span class="rwt-code-operator">]);</span>
<span class="rwt-code-operator">}</span></pre><p>The above example will create a fixed output on the <b>Threads</b> window and is here to demonstrate how
to call the methods.</p><p>To get real thread state, you need to access the debugger from the threads script.
To do this, you can use the JavaScript method <b>Debug.evaluate("expression")</b>,
which will evaluate the string argument as a debug expression
and return the result. The returned result will be an object if you evaluate an expression
that denotes a structure or an array. If the expression denotes a structure,
each field can be accessed by using its field name.</p><p>So, if you have structs in the application as follows&hellip;</p>
<pre class="rwt-code"><span class="rwt-code-keyword">struct</span><span class="rwt-code-text"> </span><span class="rwt-code-text">task </span><span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">name</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-keyword">unsigned</span><span class="rwt-code-text"> </span><span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-text">priority</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-keyword">char</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">state</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-keyword">unsigned</span><span class="rwt-code-text"> </span><span class="rwt-code-text">time</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-keyword">struct</span><span class="rwt-code-text"> </span><span class="rwt-code-text">task </span><span class="rwt-code-operator">*</span><span class="rwt-code-text">next</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-keyword">unsigned</span><span class="rwt-code-text"> </span><span class="rwt-code-text">registers</span><span class="rwt-code-operator">[</span><span class="rwt-code-literal">17</span><span class="rwt-code-operator">];</span>
  <span class="rwt-code-keyword">unsigned</span><span class="rwt-code-text"> </span><span class="rwt-code-text">thread_local_storage</span><span class="rwt-code-operator">[</span><span class="rwt-code-literal">4</span><span class="rwt-code-operator">];</span>
<span class="rwt-code-operator">};</span>

<span class="rwt-code-keyword">struct</span><span class="rwt-code-text"> </span><span class="rwt-code-text">task </span><span class="rwt-code-text">task2 </span><span class="rwt-code-operator">=</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-literal">"Task2"</span><span class="rwt-code-operator">,</span>
   <span class="rwt-code-literal">1</span><span class="rwt-code-operator">,</span>
   <span class="rwt-code-literal">"Waiting"</span><span class="rwt-code-operator">,</span>
   <span class="rwt-code-literal">2000</span><span class="rwt-code-operator">,</span>
   <span class="rwt-code-literal">0</span><span class="rwt-code-operator">,</span>
   <span class="rwt-code-operator">{</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">1</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">2</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">3</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">4</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">5</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">6</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">7</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">8</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">9</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">10</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">11</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">12</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">13</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">14</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">15</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">16</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">},</span>
   <span class="rwt-code-operator">{</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">1</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">2</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">3</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">}</span>
<span class="rwt-code-operator">};</span>

<span class="rwt-code-keyword">struct</span><span class="rwt-code-text"> </span><span class="rwt-code-text">task </span><span class="rwt-code-text">task1 </span><span class="rwt-code-operator">=</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-literal">"Task1"</span><span class="rwt-code-operator">,</span>
  <span class="rwt-code-literal">0</span><span class="rwt-code-operator">,</span>
  <span class="rwt-code-literal">"Executing"</span><span class="rwt-code-operator">,</span>
  <span class="rwt-code-literal">1000</span><span class="rwt-code-operator">,</span>
  <span class="rwt-code-operator">&amp;</span><span class="rwt-code-text">task2</span><span class="rwt-code-operator">,</span>
  <span class="rwt-code-operator">{</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">1</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">2</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">3</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">4</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">5</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">6</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">7</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">8</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">9</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">10</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">11</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">12</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">13</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">14</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">15</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">16</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">},</span>
  <span class="rwt-code-operator">{</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">1</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">2</span><span class="rwt-code-operator">,</span><span class="rwt-code-literal">3</span><span class="rwt-code-text"> </span><span class="rwt-code-operator">}</span>
<span class="rwt-code-operator">};</span></pre><p>&hellip;you can <b>update()</b> the <b>Threads</b> window using the following:</p>
<pre class="rwt-code"><span class="rwt-code-text">task1 </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"task1"</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">add</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">task1</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">name</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">task1</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">priority</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">task1</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">state</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">task1</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">time</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">task1</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">registers</span><span class="rwt-code-operator">);</span></pre><p>You can use pointers and C-style cast to enable linked-list traversal.</p>
<pre class="rwt-code"><span class="rwt-code-keyword">var</span><span class="rwt-code-text"> </span><span class="rwt-code-text">next </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"&amp;task1"</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-keyword">while</span><span class="rwt-code-function"> </span><span class="rwt-code-operator">(</span><span class="rwt-code-text">next</span><span class="rwt-code-operator">)</span>
  <span class="rwt-code-operator">{</span>
    <span class="rwt-code-keyword">var</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"*(struct task*)"</span><span class="rwt-code-operator">+</span><span class="rwt-code-text">next</span><span class="rwt-code-operator">);</span>
    <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">add</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">name</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">priority</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">state</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">time</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">registers</span><span class="rwt-code-operator">);</span>
    <span class="rwt-code-text">next </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">next</span><span class="rwt-code-operator">;</span>
  <span class="rwt-code-operator">}</span></pre><p>Note that, if the threads script goes into an endless loop, the debugger&mdash;and
consequently SEGGER Embedded Studio&mdash;will become unresponsive and you will need to kill
SEGGER Embedded Studio using a task manager. Therefore, the above loop is better coded as
follows:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">var</span><span class="rwt-code-text"> </span><span class="rwt-code-text">next </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"&amp;task1"</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-keyword">var</span><span class="rwt-code-text"> </span><span class="rwt-code-text">count </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">;</span>
<span class="rwt-code-keyword">while</span><span class="rwt-code-function"> </span><span class="rwt-code-operator">(</span><span class="rwt-code-text">next </span><span class="rwt-code-operator">&amp;&amp;</span><span class="rwt-code-text"> </span><span class="rwt-code-text">count </span><span class="rwt-code-operator">&lt;</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">10</span><span class="rwt-code-operator">)</span>
  <span class="rwt-code-operator">{</span>
    <span class="rwt-code-keyword">var</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"*(struct task*)"</span><span class="rwt-code-operator">+</span><span class="rwt-code-text">next</span><span class="rwt-code-operator">);</span>
    <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">add</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">name</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">priority</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">state</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">time</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">registers</span><span class="rwt-code-operator">);</span>
    <span class="rwt-code-text">next </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">next</span><span class="rwt-code-operator">;</span>
    <span class="rwt-code-text">count</span><span class="rwt-code-operator">++;</span>
  <span class="rwt-code-operator">}</span></pre><p>You can speed up the <b>Threads</b> window update by not supplying the registers of the thread to the
<b>Threads.add()</b> function. To do this, you should supply a handle/pointer to the thread as the
last argument to the <b>Threads.add()</b> function. For example:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">var</span><span class="rwt-code-text"> </span><span class="rwt-code-text">next </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"&amp;task1"</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-keyword">var</span><span class="rwt-code-text"> </span><span class="rwt-code-text">count </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">0</span><span class="rwt-code-operator">;</span>
<span class="rwt-code-keyword">while</span><span class="rwt-code-function"> </span><span class="rwt-code-operator">(</span><span class="rwt-code-text">next </span><span class="rwt-code-operator">&amp;&amp;</span><span class="rwt-code-text"> </span><span class="rwt-code-text">count </span><span class="rwt-code-operator">&lt;</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">10</span><span class="rwt-code-operator">)</span>
  <span class="rwt-code-operator">{</span>
    <span class="rwt-code-keyword">var</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"*(struct task*)"</span><span class="rwt-code-operator">+</span><span class="rwt-code-text">next</span><span class="rwt-code-operator">);</span>
    <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">add</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">name</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">priority</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">state</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">time</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-text">next</span><span class="rwt-code-operator">);</span>
    <span class="rwt-code-text">next</span><span class="rwt-code-operator">=</span><span class="rwt-code-text">xt</span><span class="rwt-code-operator">.</span><span class="rwt-code-text">next</span><span class="rwt-code-operator">;</span>
    <span class="rwt-code-text">count</span><span class="rwt-code-operator">++;</span>
  <span class="rwt-code-operator">}</span></pre><p>When the thread is selected, the <b>Threads</b> window
will call <b>getregs(x)</b> in the threads script. That function
should return the array of registers, for example:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">function</span><span class="rwt-code-text"> </span><span class="rwt-code-function">getregs</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">x</span><span class="rwt-code-operator">)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">return</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"((struct task*)"</span><span class="rwt-code-operator">+</span><span class="rwt-code-text">x</span><span class="rwt-code-operator">+</span><span class="rwt-code-literal">")->registers"</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-operator">}</span></pre><p>If you use thread local storage, implementing the <b>gettls(x)</b> function enables you to return
the base address of the thread local storage, for example:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">function</span><span class="rwt-code-text"> </span><span class="rwt-code-function">gettls</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">x</span><span class="rwt-code-operator">)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">return</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"((struct task*)"</span><span class="rwt-code-operator">+</span><span class="rwt-code-text">x</span><span class="rwt-code-operator">+</span><span class="rwt-code-literal">")->thread_local_storage"</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-operator">}</span></pre><p>The <b>gettls(x)</b> function can also be called with null as a parameter. In this case you will
have to evaluate an expression that returns the current thread local storage, for example:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">function</span><span class="rwt-code-text"> </span><span class="rwt-code-function">gettls</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">x</span><span class="rwt-code-operator">)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">if</span><span class="rwt-code-function"> </span><span class="rwt-code-operator">(</span><span class="rwt-code-text">x</span><span class="rwt-code-operator">==</span><span class="rwt-code-text">null</span><span class="rwt-code-operator">)</span>
    <span class="rwt-code-text">x </span><span class="rwt-code-operator">=</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"&amp;currentTask"</span><span class="rwt-code-operator">);</span>
  <span class="rwt-code-keyword">return</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"((struct task*)"</span><span class="rwt-code-operator">+</span><span class="rwt-code-text">x</span><span class="rwt-code-operator">+</span><span class="rwt-code-literal">")->thread_local_storage"</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-operator">}</span></pre><p>The debugger may require the name of a thread which you can provide by implementing 
the <b>getname(x)</b> function, for example:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">function</span><span class="rwt-code-text"> </span><span class="rwt-code-function">getname</span><span class="rwt-code-operator">(</span><span class="rwt-code-text">x</span><span class="rwt-code-operator">)</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-keyword">return</span><span class="rwt-code-text"> </span><span class="rwt-code-text">Debug</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">evaluate</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"((struct task*)"</span><span class="rwt-code-operator">+</span><span class="rwt-code-text">x</span><span class="rwt-code-operator">+</span><span class="rwt-code-literal">")->name"</span><span class="rwt-code-operator">);</span>
<span class="rwt-code-operator">}</span></pre><h5>Adding extra queues to the threads window</h5><p>You can add extra information to the threads window to display other
RTOS queues. In the <b>function init()</b> you can use <b>Threads.setColumns2</b> to create an
additional display in the threads window, for example:</p>
<pre class="rwt-code"><span class="rwt-code-keyword">function</span><span class="rwt-code-text"> </span><span class="rwt-code-function">init</span><span class="rwt-code-operator">()</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-operator">...</span>
  <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">setColumns2</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"Timers"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Id(Timers)"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Name"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Hook"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Timeout"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Period"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"Active"</span><span class="rwt-code-operator">);</span></pre><p>The first argument is identifier of the queue which is also supplied to <b>Threads.add2</b>
in the <b>function update()</b> as follows</p>
<pre class="rwt-code"><span class="rwt-code-keyword">function</span><span class="rwt-code-text"> </span><span class="rwt-code-function">update</span><span class="rwt-code-operator">()</span>
<span class="rwt-code-operator">{</span>
  <span class="rwt-code-operator">...</span>
  <span class="rwt-code-text">Threads</span><span class="rwt-code-operator">.</span><span class="rwt-code-function">add2</span><span class="rwt-code-operator">(</span><span class="rwt-code-literal">"Timers"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"0x1FF0A30"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"MyTimer"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"0x46C8 (Timer50)"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"50(550)"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"50"</span><span class="rwt-code-operator">,</span><span class="rwt-code-text"> </span><span class="rwt-code-literal">"1"</span><span class="rwt-code-operator">);</span></pre> 
    </div>
  </body>
</html>